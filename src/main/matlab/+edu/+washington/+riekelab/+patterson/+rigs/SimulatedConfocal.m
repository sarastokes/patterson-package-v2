classdef SimulatedConfocal < symphonyui.core.descriptions.RigDescription
    % SIMULATEDCONFOCAL
    %
    % Description:
    %   Simulated Confocal rig config for testing out LED stimuli. One
    %   amplifier plus the red, uv and green LEDs.
    %
    % See also:
    %   SimulatedHekaDaqWithMultiClamp700B
    %
    % History:
    %   15Feb2019 - SSP
    % ---------------------------------------------------------------------
    
    methods
        function obj = SimulatedConfocal()
            import symphonyui.builtin.daqs.*;
            import symphonyui.builtin.devices.*;
            import symphonyui.core.*;
            import edu.washington.*;
            
            daq = HekaSimulationDaqController();
            obj.daqController = daq;
            
            amp1 = MultiClampDevice('Amp1', 1, []).bindStream(daq.getStream('ao0')).bindStream(daq.getStream('ai0'));
            obj.addDevice(amp1);
            
            red = UnitConvertingDevice('Red LED', 'V').bindStream(daq.getStream('ao1'));
            red.addConfigurationSetting('ndfs', {}, ...
                'type', PropertyType('cellstr', 'row', {'E1', 'E2', 'E3', 'E4', 'E5', 'E10', 'E11', 'E12'}));
            red.addResource('ndfAttenuations', containers.Map( ...
                {'E1', 'E2', 'E3', 'E4', 'E5', 'E10', 'E11', 'E12'}, ...
                {0.24, 0.63, 0.94, 2.02, 3.43, 1.86, 3.73, 0.3}));
            red.addConfigurationSetting('gain', '',...
                'type', PropertyType('char', 'row', {'', 'low', 'medium', 'high'}));
            red.addResource('fluxFactorPaths', containers.Map(...
                {'low', 'medium', 'high'}, {...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'red_led_low_flux_factors.txt'),...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'red_led_medium_flux_factors.txt'),...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'red_led_high_flux_factors.txt')}));
            red.addConfigurationSetting('lightPath', '', ...
                'type', PropertyType('char', 'row', {'', 'below', 'above'}));
            red.addResource('spectrum', importdata(...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'red_led_spectrum.txt')));
            obj.addDevice(red);
            
            uv = UnitConvertingDevice('UV LED', 'V').bindStream(daq.getStream('ao2'));
            uv.addConfigurationSetting('ndfs', {}, ...
                'type', PropertyType('cellstr', 'row', {'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E12'}));
            uv.addResource('ndfAttenuations', containers.Map( ...
                {'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E12'}, ...
                {0.26, 0.52, 0.89, 2.30, 4.20, 1.88, 3.92, 0.28}));
            uv.addConfigurationSetting('gain', '', ...
                'type', PropertyType('char', 'row', {'', 'low', 'medium', 'high'}));
            uv.addResource('fluxFactorPaths', containers.Map( ...
                {'low', 'medium', 'high'}, { ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'uv_led_low_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'uv_led_medium_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'uv_led_high_flux_factors.txt')}));
            uv.addConfigurationSetting('lightPath', '', ...
                'type', PropertyType('char', 'row', {'', 'below', 'above'}));
            uv.addResource('spectrum', importdata(...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'uv_led_spectrum.txt')));
            obj.addDevice(uv);
            
            green = UnitConvertingDevice('Green LED', 'V').bindStream(daq.getStream('ao3'));
            green.addConfigurationSetting('ndfs', {}, 'type',...
                PropertyType('cellstr', 'row', {'E1', 'E2', 'E3', 'E4', 'E5', 'E8', 'E9', 'E12'}));
            green.addResource('ndfAttenuations', containers.Map(...
                {'E1', 'E2', 'E3', 'E4', 'E5', 'E8', 'E9', 'E12'},...
                {0.26, 0.58, 0.93, 2.19, 4.11, 1.85, 3.8, 0.3}));
            green.addConfigurationSetting('gain', '', 'type',...
                PropertyType('char', 'row', {'', 'low', 'medium', 'high'}));
            green.addResource('fluxFactorPaths', containers.Map( ...
                {'low', 'medium', 'high'}, { ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'green_led_low_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'green_led_medium_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'green_led_high_flux_factors.txt')}));
            green.addConfigurationSetting('lightPath', '', ...
                'type', PropertyType('char', 'row', {'', 'below', 'above'}));
            green.addResource('spectrum', importdata(...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'green_led_spectrum.txt')));
            obj.addDevice(green);
            
            trigger1 = UnitConvertingDevice('Trigger1',...
                symphonyui.core.Measurement.UNITLESS).bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(trigger1, 0);
            obj.addDevice(trigger1);
        end
    end
end